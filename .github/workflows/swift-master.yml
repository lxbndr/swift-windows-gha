name: swift-master
on:
  push:
    paths-ignore: 
      - .github/workflows/playground.yml
      - .github/workflows/swift-master-nsd.yml
      - .github/workflows/swift-5.2.yml
      - README.md

  schedule:
    - cron: '0 22 * * *'

env:
  SW_CURL_VERSION: development
  SW_ICU_VERSION: 64
  SW_XML2_VERSION: development
  SW_ZLIB_VERSION: 1.2.11

jobs:
  icu:

    runs-on: windows-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Checkout ICU
        uses: actions/checkout@v2
        with:
          repository: 'unicode-org/icu'
          ref: 'maint/maint-${{ env.SW_ICU_VERSION }}'
          fetch-depth: 1
          path: 'icu'
      - name: Configure Build Environment
        shell: cmd
        run: scripts\workflows\jobs\icu\steps\configure-build-environment.cmd

      - name: Configure ICU
        shell: cmd
        run: scripts\workflows\jobs\icu\steps\configure-icu.cmd

      - name: Build ICU
        shell: cmd
        run: scripts\workflows\jobs\icu\steps\build-icu.cmd

      - name: Install ICU
        shell: cmd
        run: scripts\workflows\jobs\icu\steps\install-icu.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: icu
          path: i

  curl:

    runs-on: windows-latest
    needs: [zlib]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout curl
        uses: actions/checkout@v2
        with:
          repository: 'curl/curl'
          ref: 'master'
          fetch-depth: 1
          path: 'curl'
      - name: Download zlib
        uses: actions/download-artifact@v1
        with:
          name: zlib
          path: 'a'
      - name: Configure Build Environment
        shell: cmd
        run: |
          call .github\workflows\vsenv.cmd -arch=x64 -host_arch=x64
          
          set SW_ARTIFACTS_PATH=%GITHUB_WORKSPACE%\a
          set SW_INSTALL_PATH=%GITHUB_WORKSPACE%\i\Library\libcurl-%SW_CURL_VERSION%\usr
          set SW_ZLIB_PATH=%SW_ARTIFACTS_PATH%\Library\zlib-%SW_ZLIB_VERSION%
          
          echo ::set-env name=SW_ARTIFACTS_PATH::%SW_ARTIFACTS_PATH%
          echo ::set-env name=SW_INSTALL_PATH::%SW_INSTALL_PATH%
          echo ::set-env name=SW_ZLIB_PATH::%SW_ZLIB_PATH%

      - name: Configure curl
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %GITHUB_WORKSPACE%\curl^
           -B %GITHUB_WORKSPACE%\b^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -C %GITHUB_WORKSPACE%\cmake\caches\curl.cmake^
           -D CMAKE_BUILD_TYPE=MinSizeRel^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D ZLIB_ROOT=%SW_ZLIB_PATH%\usr^
           -D BUILD_SHARED_LIBS=NO^
           -D BUILD_TESTING=NO

      - name: Build curl
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b
      - name: Install zlib
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b --target install
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: curl
          path: i

  libxml2:

    runs-on: windows-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Checkout libxml2
        uses: actions/checkout@v2
        with:
          repository: 'compnerd/libxml2'
          ref: 'cmake'
          fetch-depth: 1
          path: 'libxml2'
      - name: Configure Build Environment
        shell: cmd
        run: |
          call .github\workflows\vsenv.cmd -arch=x64 -host_arch=x64
          
          set SW_INSTALL_PATH=%GITHUB_WORKSPACE%\i\Library\libxml2-%SW_XML2_VERSION%\usr
          echo ::set-env name=SW_INSTALL_PATH::%SW_INSTALL_PATH%

      - name: Configure libxml2
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %GITHUB_WORKSPACE%\libxml2^
           -B %GITHUB_WORKSPACE%\b^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -C %GITHUB_WORKSPACE%\cmake\caches\libxml2.cmake^
           -D CMAKE_BUILD_TYPE=MinSizeRel^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D BUILD_SHARED_LIBS=NO^
           -D BUILD_TESTING=NO

      - name: Build libxml2
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b
      - name: Install libxml2
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b --target install
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: libxml2
          path: i

  zlib:

    runs-on: windows-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Checkout zlib
        uses: actions/checkout@v2
        with:
          repository: 'madler/zlib'
          ref: 'refs/tags/v${{ env.SW_ZLIB_VERSION }}'
          fetch-depth: 1
          path: 'zlib'
      - name: Configure Build Environment
        shell: cmd
        run: |
          call .github\workflows\vsenv.cmd -arch=x64 -host_arch=x64
          
          set SW_INSTALL_PATH=%GITHUB_WORKSPACE%\i\Library\zlib-%SW_ZLIB_VERSION%\usr
          echo ::set-env name=SW_INSTALL_PATH::%SW_INSTALL_PATH%

      - name: Configure zlib
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %GITHUB_WORKSPACE%\zlib^
           -B %GITHUB_WORKSPACE%\b^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -D CMAKE_BUILD_TYPE=MinSizeRel^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D CMAKE_POSITION_INDEPENDENT_CODE=YES^
           -D BUILD_SHARED_LIBS=NO^
           -D BUILD_TESTING=NO

      - name: Build zlib
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b
      - name: Install zlib
        shell: cmd
        run: |
          cmake --build %GITHUB_WORKSPACE%\b --target install
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: zlib
          path: i

  toolchain:

    runs-on: windows-latest
    needs: [icu]
    strategy:
      matrix:
        branch: ['master']
        include:
          - branch: 'master'
            llvm-ref: 'swift/master'
            cmark-ref: 'master'
            libdispatch-ref: 'master'
            swift-ref: 'master'
          - branch: '5.2'
            llvm-ref: 'swift/swift-5.2-branch'
            cmark-ref: 'swift-5.2-branch'
            libdispatch-ref: 'swift-5.2-branch'
            swift-ref: 'swift-5.2-branch'

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Configure Git
        shell: cmd
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true

      - name: Checkout LLVM
        uses: actions/checkout@v2
        with:
          repository: 'apple/llvm-project'
          ref: ${{ matrix.llvm-ref }}
          fetch-depth: 1
          path: 's/toolchain' 
      - name: Checkout cmark
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift-cmark'
          ref: ${{ matrix.cmark-ref }}
          fetch-depth: 1
          path: 's/toolchain/cmark' 
      - name: Checkout libdispatch
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift-corelibs-libdispatch'
          ref: ${{ matrix.libdispatch-ref }}
          fetch-depth: 1
          path: 's/swift-corelibs-libdispatch' 
      - name: Checkout swift
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift'
          ref: ${{ matrix.swift-ref }}
          fetch-depth: 1
          path: 's/toolchain/swift'
      - name: Download ICU
        uses: actions/download-artifact@v1
        with:
          name: icu
          path: 'a'
      - name: Collect Checkout Info
        shell: cmd
        run: |
          mkdir %GITHUB_WORKSPACE%\checkout
          git -C s/toolchain rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\llvm-project.txt
          git -C s/toolchain/cmark rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-cmark.txt
          git -C s/swift-corelibs-libdispatch rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift-corelibs-libdispatch.txt
          git -C s/toolchain/swift rev-parse HEAD > %GITHUB_WORKSPACE%\checkout\swift.txt

      - name: Upload Checkout Info
        uses: actions/upload-artifact@v1
        with:
          name: checkout-${{ matrix.branch }}
          path: 'checkout'

      - name: Configure Build Environment
        shell: cmd
        run: |
          call .github\workflows\vsenv.cmd -arch=x64 -host_arch=x64
          
          set SW_ARTIFACTS_PATH=%GITHUB_WORKSPACE%\a
          set SW_SOURCES_PATH=%GITHUB_WORKSPACE%\s
          set SW_BINARIES_PATH=%GITHUB_WORKSPACE%\b
          set SW_INSTALL_PATH=%GITHUB_WORKSPACE%\i\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain
          set SW_ICU_PATH=%SW_ARTIFACTS_PATH%\Library\icu-%SW_ICU_VERSION%
          
          echo ::set-env name=SW_ARTIFACTS_PATH::%SW_ARTIFACTS_PATH%
          echo ::set-env name=SW_SOURCES_PATH::%SW_SOURCES_PATH%
          echo ::set-env name=SW_BINARIES_PATH::%SW_BINARIES_PATH%
          echo ::set-env name=SW_INSTALL_PATH::%SW_INSTALL_PATH%
          echo ::set-env name=SW_ICU_PATH::%SW_ICU_PATH%

      - name: Configure LLVM Build Tools
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\toolchain\llvm^
           -B %SW_BINARIES_PATH%\llvm-tools^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D LLVM_ENABLE_ASSERTIONS=NO^
           -D LLVM_ENABLE_PROJECTS="clang;lldb"^
           -D LLDB_INCLUDE_TESTS=NO

      - name: Build LLVM Build Tools
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\llvm-tools --target llvm-tblgen
      - name: Build Clang Build Tool
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\llvm-tools --target clang-tblgen
      - name: Build LLDB Build Tools
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\llvm-tools --target lldb-tblgen
      - name: Configure SDK
        shell: cmd
        run: |
          copy %SW_SOURCES_PATH%\toolchain\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy %SW_SOURCES_PATH%\toolchain\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy %SW_SOURCES_PATH%\toolchain\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy %SW_SOURCES_PATH%\toolchain\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"

      - name: Use Python 2.7.x
        uses: actions/setup-python@v1.1.1
        with:
          python-version: 2.7.x
      - name: Expose Build Tools
        shell: cmd
        run: |          
          echo ::set-env name=LLVM_TABLEGEN::%SW_BINARIES_PATH%\llvm-tools\bin\llvm-tblgen.exe
          echo ::set-env name=CLANG_TABLEGEN::%SW_BINARIES_PATH%\llvm-tools\bin\clang-tblgen.exe
          echo ::set-env name=LLDB_TABLEGEN::%SW_BINARIES_PATH%\llvm-tools\bin\lldb-tblgen.exe

      - name: Configure Toolchain
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\toolchain\llvm^
           -B %SW_BINARIES_PATH%\toolchain^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -C %GITHUB_WORKSPACE%\cmake\caches\org.lxbndr.dt.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%\usr^
           -D LLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-windows-msvc^
           -D LLVM_USE_HOST_TOOLS=NO^
           -D LLVM_TABLEGEN=%LLVM_TABLEGEN%^
           -D CLANG_TABLEGEN=%CLANG_TABLEGEN%^
           -D LLDB_TABLEGEN=%LLDB_TABLEGEN%^
           -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=%SW_SOURCES_PATH%\swift-corelibs-libdispatch^
           -D LLVM_ENABLE_LIBEDIT=NO^
           -D LLVM_PARALLEL_LINK_JOBS=2^
           -D PYTHON_EXECUTABLE=%pythonLocation%\python.exe^
           -D SWIFT_WINDOWS_x86_64_ICU_UC_INCLUDE=%SW_ICU_PATH%\usr\include\unicode^
           -D SWIFT_WINDOWS_x86_64_ICU_UC=%SW_ICU_PATH%\usr\lib\icuuc%SW_ICU_VERSION%.lib^
           -D SWIFT_WINDOWS_x86_64_ICU_I18N_INCLUDE=%SW_ICU_PATH%\usr\include^
           -D SWIFT_WINDOWS_x86_64_ICU_I18N=%SW_ICU_PATH%\usr\lib\icuin%SW_ICU_VERSION%.lib^
           -D SWIFT_PARALLEL_LINK_JOBS=2^
           -D SWIFT_BUILD_DYNAMIC_STDLIB=YES^
           -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=YES

      - name: Build Toolchain
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\toolchain --target distribution

      - name: Install Toolchain
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\toolchain --target install-distribution

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: toolchain-${{ matrix.branch }}
          path: i

      - name: Prepare Test Environment
        shell: cmd
        run: |
          echo ::set-env name=PATH::%SW_ICU_PATH%\usr\bin;%SW_INSTALL_PATH%\usr\bin;%PATH%;%ProgramFiles%\Git\usr\bin

      - name: Check Swift
        continue-on-error: true
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\toolchain --target check-swift

  sdk:

    runs-on: windows-latest
    needs: [curl, icu, libxml2, toolchain, zlib]
    strategy:
      matrix:
        branch: ['master']
        include:
          - branch: 'master'
            libdispatch-ref: 'master'
            foundation-ref: 'master'
            xctest-ref: 'master'

          - branch: '5.2'
            libdispatch-ref: 'swift-5.2-branch'
            foundation-ref: 'swift-5.2-branch'
            xctest-ref: 'swift-5.2-branch'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Checkout Info
        uses: actions/download-artifact@v1
        with:
          name: checkout-${{ matrix.branch }}
          path: 'a/checkout'
      - name: Read Checkout Info
        shell: cmd
        run: |
          set /p SW_LLVM_REV=< a\checkout\llvm-project.txt
          set /p SW_SWIFT_REV=< a\checkout\swift.txt
          
          echo llvm-project rev is %SW_LLVM_REV%
          echo swift rev is %SW_SWIFT_REV%
          
          echo ::set-env name=SW_LLVM_REV::%SW_LLVM_REV%
          echo ::set-env name=SW_SWIFT_REV::%SW_SWIFT_REV%
          
      - name: Configure Git
        shell: cmd
        run: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
      - name: Checkout LLVM
        uses: actions/checkout@v2
        with:
          repository: 'apple/llvm-project'
          ref: ${{ env.SW_LLVM_REV }}
          fetch-depth: 1
          path: 's/llvm-project'
      - name: Checkout swift
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift'
          ref: ${{ env.SW_SWIFT_REV }}
          fetch-depth: 1
          path: 's/swift'
      - name: Checkout libdispatch
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift-corelibs-libdispatch'
          ref: ${{ matrix.libdispatch-ref }}
          fetch-depth: 1
          path: 's/swift-corelibs-libdispatch'
      - name: Checkout foundation
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift-corelibs-foundation'
          ref: ${{ matrix.foundation-ref }}
          fetch-depth: 1
          path: 's/swift-corelibs-foundation'
      - name: Checkout xctest
        uses: actions/checkout@v2
        with:
          repository: 'apple/swift-corelibs-xctest'
          ref: ${{ matrix.xctest-ref }}
          fetch-depth: 1
          path: 's/swift-corelibs-xctest'

      - name: Download ICU
        uses: actions/download-artifact@v1
        with:
          name: icu
          path: 'a'
      - name: Download curl
        uses: actions/download-artifact@v1
        with:
          name: curl
          path: 'a'
      - name: Download libxml2
        uses: actions/download-artifact@v1
        with:
          name: libxml2
          path: 'a'
      - name: Download zlib
        uses: actions/download-artifact@v1
        with:
          name: zlib
          path: 'a'
      - name: Download toolchain
        uses: actions/download-artifact@v1
        with:
          name: toolchain-${{ matrix.branch }}
          path: 'a'

      - name: Configure Build Environment
        shell: cmd
        run: |
          call .github\workflows\vsenv.cmd -arch=x64 -host_arch=x64
          
          set SW_ARTIFACTS_PATH=%GITHUB_WORKSPACE%\a
          set SW_SOURCES_PATH=%GITHUB_WORKSPACE%\s
          set SW_BINARIES_PATH=%GITHUB_WORKSPACE%\b
          
          set SW_PLATFORM_PATH=%GITHUB_WORKSPACE%\i\Library\Developer\Platforms\Windows.platform
          
          set SW_SDK_PATH=%SW_PLATFORM_PATH%\Developer\SDKs\Windows.sdk
          set SW_INSTALL_PATH=%SW_SDK_PATH%\usr
          set SW_XCTEST_INSTALL_PATH=%SW_PLATFORM_PATH%\Developer\Library\XCTest-development\usr
          
          set SW_TOOLCHAIN_PATH=%SW_ARTIFACTS_PATH%\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain
          set SW_CURL_PATH=%SW_ARTIFACTS_PATH%\Library\libcurl-%SW_CURL_VERSION%
          set SW_ICU_PATH=%SW_ARTIFACTS_PATH%\Library\icu-%SW_ICU_VERSION%
          set SW_XML2_PATH=%SW_ARTIFACTS_PATH%\Library\libxml2-%SW_XML2_VERSION%
          set SW_ZLIB_PATH=%SW_ARTIFACTS_PATH%\Library\zlib-%SW_ZLIB_VERSION%
          
          set CTEST_OUTPUT_ON_FAILURE=1
          
          set PATH=%SW_TOOLCHAIN_PATH%\usr\bin;%PATH%
          
          
          echo ::set-env name=SW_ARTIFACTS_PATH::%SW_ARTIFACTS_PATH%
          echo ::set-env name=SW_SOURCES_PATH::%SW_SOURCES_PATH%
          echo ::set-env name=SW_BINARIES_PATH::%SW_BINARIES_PATH%
          
          echo ::set-env name=SW_PLATFORM_PATH::%SW_PLATFORM_PATH%
          
          echo ::set-env name=SW_SDK_PATH::%SW_SDK_PATH%
          echo ::set-env name=SW_INSTALL_PATH::%SW_INSTALL_PATH%
          echo ::set-env name=SW_XCTEST_INSTALL_PATH::%SW_XCTEST_INSTALL_PATH%
          
          echo ::set-env name=SW_TOOLCHAIN_PATH::%SW_TOOLCHAIN_PATH%
          echo ::set-env name=SW_CURL_PATH::%SW_CURL_PATH%
          echo ::set-env name=SW_ICU_PATH::%SW_ICU_PATH%
          echo ::set-env name=SW_XML2_PATH::%SW_XML2_PATH%
          echo ::set-env name=SW_ZLIB_PATH::%SW_ZLIB_PATH%
          
          echo ::set-env name=PATH::%PATH%
          
          echo ::set-env name=CTEST_OUTPUT_ON_FAILURE::%CTEST_OUTPUT_ON_FAILURE%
          
          copy %SW_SOURCES_PATH%\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy %SW_SOURCES_PATH%\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy %SW_SOURCES_PATH%\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy %SW_SOURCES_PATH%\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"

      - name: Use Python 2.7.x
        uses: actions/setup-python@v1.1.1
        with:
          python-version: 2.7.x

      - name: Configure LLVM
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\llvm-project\llvm^
           -B %SW_BINARIES_PATH%\llvm^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D LLVM_HOST_TRIPLE=x86_64-unknown-windows-msvc

      - name: Configure Swift Standard Library
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift^
           -B %SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -C %GITHUB_WORKSPACE%\cmake\caches\swift-stdlib-windows-x86_64.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D LLVM_DIR=%SW_BINARIES_PATH%\llvm\lib\cmake\llvm^
           -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=%SW_TOOLCHAIN_PATH%\usr\bin^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D SWIFT_WINDOWS_x86_64_ICU_UC_INCLUDE=%SW_ICU_PATH%\usr\include\unicode^
           -D SWIFT_WINDOWS_x86_64_ICU_UC=%SW_ICU_PATH%\usr\lib\icuuc%SW_ICU_VERSION%.lib^
           -D SWIFT_WINDOWS_x86_64_ICU_I18N_INCLUDE=%SW_ICU_PATH%\usr\include^
           -D SWIFT_WINDOWS_x86_64_ICU_I18N=%SW_ICU_PATH%\usr\lib\icuin%SW_ICU_VERSION%.lib^
           -D PYTHON_EXECUTABLE=%pythonLocation%\python.exe

      - name: Build Swift Standard Library
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\swift-stdlib

      - name: Configure libdispatch
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift-corelibs-libdispatch^
           -B %SW_BINARIES_PATH%\libdispatch^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -D SWIFT_STDLIB_DIR=%SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-swift-flags.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D BUILD_TESTING=NO^
           -D ENABLE_SWIFT=YES

      - name: Build libdispatch
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\libdispatch

      - name: Configure Foundation
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift-corelibs-foundation^
           -B %SW_BINARIES_PATH%\foundation^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -D SWIFT_STDLIB_DIR=%SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-swift-flags.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D ZLIB_LIBRARY=%SW_ZLIB_PATH%\usr\lib\zlibstatic.lib^
           -D ZLIB_INCLUDE_DIR=%SW_ZLIB_PATH%\usr\include^
           -D ICU_INCLUDE_DIR=%SW_ICU_PATH%\usr\include^
           -D ICU_UC_LIBRARY=%SW_ICU_PATH%\usr\lib\icuuc%SW_ICU_VERSION%.lib^
           -D ICU_UC_LIBRARY_RELEASE=%SW_ICU_PATH%/usr/lib/icuuc%SW_ICU_VERSION%.lib^
           -D ICU_I18N_LIBRARY=%SW_ICU_PATH%/usr/lib/icuin%SW_ICU_VERSION%.lib^
           -D ICU_I18N_LIBRARY_RELEASE=%SW_ICU_PATH%/usr/lib/icuin%SW_ICU_VERSION%.lib^
           -D LIBXML2_LIBRARY=%SW_XML2_PATH%\usr\lib\libxml2s.lib^
           -D LIBXML2_INCLUDE_DIR=%SW_XML2_PATH%\usr\include\libxml2^
           -D dispatch_DIR=%SW_BINARIES_PATH%\libdispatch\cmake\modules^
           -D CURL_DIR=%SW_CURL_PATH%\usr\lib\cmake\CURL^
           -D ENABLE_TESTING=NO

      - name: Build Foundation
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\foundation

      - name: Configure XCTest
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift-corelibs-xctest^
           -B %SW_BINARIES_PATH%\xctest^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -D SWIFT_STDLIB_DIR=%SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-swift-flags.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_XCTEST_INSTALL_PATH%^
           -D ENABLE_TESTING=NO^
           -D dispatch_DIR=%SW_BINARIES_PATH%\libdispatch\cmake\modules^
           -D Foundation_DIR=%SW_BINARIES_PATH%\foundation\cmake\modules

      - name: Build XCTest
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\xctest

      - name: Install Swift Standard Library
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\swift-stdlib --target install

      - name: Install Foundation
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\foundation --target install

      - name: Install XCTest
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\xctest --target install

      - name: Install libdispatch
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\libdispatch --target install

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: sdk-${{ matrix.branch }}
          path: i

      - name: Configure libdispatch Tests
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift-corelibs-libdispatch^
           -B %SW_BINARIES_PATH%\libdispatch^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -D SWIFT_STDLIB_DIR=%SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-swift-flags.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D BUILD_TESTING=YES^
           -D ENABLE_SWIFT=YES

      - name: Build libdispatch
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\libdispatch

      - name: Test libdispatch
        shell: cmd
        continue-on-error: true
        run: |
          cmake --build %SW_BINARIES_PATH%\libdispatch --target ExperimentalTest

      - name: Configure Foundation Test Environment
        shell: cmd
        run: |
          set PATH=%SW_ICU_PATH%\usr\bin;%SW_BINARIES_PATH%\swift-stdlib\bin;%SW_BINARIES_PATH%\libdispatch;%SW_BINARIES_PATH%\foundation\Foundation;%SW_BINARIES_PATH%\xctest;%PATH%;%ProgramFiles%\Git\usr\bin
          echo ::set-env name=PATH::%PATH%

      - name: Configure Foundation Tests
        shell: cmd
        run: |
          cmake^
           -G Ninja^
           -S %SW_SOURCES_PATH%\swift-corelibs-foundation^
           -B %SW_BINARIES_PATH%\foundation^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-clang.cmake^
           -D SWIFT_STDLIB_DIR=%SW_BINARIES_PATH%\swift-stdlib^
           -C %GITHUB_WORKSPACE%\cmake\caches\windows-x86_64-swift-flags.cmake^
           -D CMAKE_BUILD_TYPE=Release^
           -D CMAKE_INSTALL_PREFIX=%SW_INSTALL_PATH%^
           -D ZLIB_LIBRARY=%SW_ZLIB_PATH%\usr\lib\zlibstatic.lib^
           -D ZLIB_INCLUDE_DIR=%SW_ZLIB_PATH%\usr\include^
           -D ICU_INCLUDE_DIR=%SW_ICU_PATH%\usr\include^
           -D ICU_UC_LIBRARY=%SW_ICU_PATH%\usr\lib\icuuc%SW_ICU_VERSION%.lib^
           -D ICU_UC_LIBRARY_RELEASE=%SW_ICU_PATH%/usr/lib/icuuc%SW_ICU_VERSION%.lib^
           -D ICU_I18N_LIBRARY=%SW_ICU_PATH%/usr/lib/icuin%SW_ICU_VERSION%.lib^
           -D ICU_I18N_LIBRARY_RELEASE=%SW_ICU_PATH%/usr/lib/icuin%SW_ICU_VERSION%.lib^
           -D LIBXML2_LIBRARY=%SW_XML2_PATH%\usr\lib\libxml2s.lib^
           -D LIBXML2_INCLUDE_DIR=%SW_XML2_PATH%\usr\include\libxml2^
           -D dispatch_DIR=%SW_BINARIES_PATH%\libdispatch\cmake\modules^
           -D CURL_DIR=%SW_CURL_PATH%\usr\lib\cmake\CURL^
           -D ENABLE_TESTING=YES^
           -D XCTest_DIR=%SW_BINARIES_PATH%\xctest\cmake\modules

      - name: Build Foundation Tests
        shell: cmd
        run: |
          cmake --build %SW_BINARIES_PATH%\foundation

      - name: Test Foundation
        shell: cmd
        continue-on-error: true
        run: |
          cmake --build %SW_BINARIES_PATH%\foundation --target test
