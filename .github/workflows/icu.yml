name: icu
on:
  workflow_dispatch:
    inputs:
      check_run_id:
        description: Check Run ID
        required: false
  schedule:
    - cron: '30 21 * * *'

jobs:

  check-in:
    name: Check In
    runs-on: ubuntu-latest
    if: github.event.inputs.check_run_id

    steps:  
      - name: Get Current Run
        id: get_run
        run: |
          set -e
          
          http_code=$(curl -s -o run.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }})
      
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to fetch run ${{ github.run_id }}"
            exit 1
          fi
          
          HTML_URL=$(jq -r '.html_url' run.json)
          
          echo "Run HTML URL: $HTML_URL"          
          echo "::set-output name=html_url::$HTML_URL"

      - name: Update CI Check
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"status":"in_progress","details_url":"${{ steps.get_run.outputs.html_url }}"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

  icu:
    name: ICU
    runs-on: windows-latest
    needs: [check-in]
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Prepare Build Drive
        run: |
          call scripts\tools\get-free-drive.cmd
          subst %SW_FREE_DRIVE% ${{ github.workspace }}
          echo SW_WORK_DIR=%SW_FREE_DRIVE%>>%GITHUB_ENV%

      - name: Configure Build
        run: |
          subst

          scripts\configure.cmd^
           --interactive=NO^
           --sources-dir=%SW_WORK_DIR%\s^
           --build-dir=%SW_WORK_DIR%\b^
           --install-dir=%SW_WORK_DIR%\i^
           --artifacts-dir=%SW_WORK_DIR%\a

      - name: Configure Environment
        run: |
          call scripts\workflows\configure-build-environment.cmd
          call scripts\workflows\load-configuration.cmd
          call scripts\workflows\jobs\steps\icu\configure-build-environment.cmd
          call scripts\tools\export-environment.cmd

      - name: Checkout ICU
        run: scripts\workflows\jobs\steps\icu\checkout-icu.cmd

      - name: Patch ICU
        run: scripts\workflows\jobs\steps\icu\patch-icu.cmd

      - name: Configure ICU
        run: scripts\workflows\jobs\steps\icu\configure-icu.cmd

      - name: Build ICU
        run: scripts\workflows\jobs\steps\icu\build-icu.cmd

      - name: Install ICU
        run: scripts\workflows\jobs\steps\icu\install-icu.cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: icu
          path: ${{ env.SW_INSTALL_DIR }}

      - name: Remove Build Drive
        if: always()
        run: subst /d %SW_WORK_DIR%

  check-out:
    name: Check Out
    runs-on: ubuntu-latest
    if: always()
    needs: [check-in, icu]

    steps:
      - name: Update CI Check - Success
        if: github.event.inputs.check_run_id && needs.icu.result == 'success'
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"success"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Failure
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'failure')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"failure"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Cancelled
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'cancelled')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"cancelled"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update Badge - Success
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.ref == 'refs/heads/master' && needs.icu.result == 'success'
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: e75dcdc92f031e71745ff1dbb56decd4
          filename: ${{ github.workflow }}-badge.json
          label: ${{ github.workflow }}
          message: success
          color: success

      - name: Update Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.ref == 'refs/heads/master' && contains(needs.*.result, 'failure')
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: e75dcdc92f031e71745ff1dbb56decd4
          filename: ${{ github.workflow }}-badge.json
          label: ${{ github.workflow }}
          message: failure
          color: critical
